global _start                 ; делаем метку метку _start видимой извне для линкера в качестве точки входа в программу

; директивы указывающие на то, что функции определены в другой библиотеке (например kernel32), их нужно будет подключить при линковке.
extern WriteFile              ; подключем функцию WriteFile
extern GetStdHandle           ; подключем функцию GetStdHandle

section .data                 ; секция данных
message: db "Hello World!",10 ; строка для вывода на консоль, с символом новой строки в конце

; начало секции кода и метка _start, которая указывает на начало программы.
section .text                 ; объявление секции кода
_start:                       ; метка _start - точка входа в программу

    sub  rsp, 40              ; Для параметров функций WriteFile и GetStdHandle резервируем 40 байт (5 параметров по 8 байт)

    ; загружаем аргумент STD_OUTPUT для функции GetStdHandle в регистр rcx и вызываем саму функцию.
    mov  rcx, -11             ; Аргумент для GetStdHandle - STD_OUTPUT
    call GetStdHandle         ; вызываем функцию GetStdHandle

    ; вызываем функцию WriteFile для вывода строки "Hello World!" в консоль. Загружаем необходимые параметры в регистры rcx, rdx, r8d, r9 и вызываем функцию.
    mov  rcx, rax             ; Первый параметр WriteFile - в регистр RCX помещаем дескриптор файла - консоли
    mov  rdx, message         ; Второй параметр WriteFile - загружаем указатель на строку в регистр RDX
    mov  r8d, 12              ; Третий параметр WriteFile - длина строки для записи в регистре R8D 
    xor  r9, r9               ; Четвертый параметр WriteFile - адрес для получения записанных байтов
    mov  qword [rsp + 32], 0  ; Пятый параметр WriteFile
    call WriteFile            ; вызываем функцию WriteFile

    add  rsp, 40              ; Освобождаем выделенное место на стеке

    mov eax, 0                ; Установка кода возврата в 0 (успешное завершение программы)

    ret                       ; выход из программы